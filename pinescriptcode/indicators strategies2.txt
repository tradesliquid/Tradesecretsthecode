r2MidLevelHT = math.round_to_mintick((r2LevelHT + r1LevelHT) / 2)
s2MidLevelHT = math.round_to_mintick((s2LevelHT + s1LevelHT) / 2)
r3LevelHT = math.round_to_mintick(r1LevelHT + range_1HT)
s3LevelHT = math.round_to_mintick(s1LevelHT - range_1HT)
r3MidLevelHT = math.round_to_mintick((r3LevelHT + r2LevelHT) / 2)
s3MidLevelHT = math.round_to_mintick((s3LevelHT + s2LevelHT) / 2)
r4LevelHT = math.round_to_mintick(r2LevelHT + range_1HT)
s4LevelHT = math.round_to_mintick(s2LevelHT - range_1HT)
r4MidLevelHT = math.round_to_mintick((r4LevelHT + r3LevelHT) / 2)
s4MidLevelHT = math.round_to_mintick((s4LevelHT + s3LevelHT) / 2)
r5LevelHT = math.round_to_mintick(r3LevelHT + range_1HT)
s5LevelHT = math.round_to_mintick(s3LevelHT - range_1HT)
r5MidLevelHT = math.round_to_mintick((r5LevelHT + r4LevelHT) / 2)
s5MidLevelHT = math.round_to_mintick((s5LevelHT + s4LevelHT) / 2)
var line pLineHT = na
var line r1LineHT = na
var line r2LineHT = na
var line r3LineHT = na
var line r4LineHT = na
var line r5LineHT = na
var line s1LineHT = na
var line s2LineHT = na
var line s3LineHT = na
var line s4LineHT = na
var line s5LineHT = na
var line r1MidLineHT = na
var line r2MidLineHT = na
var line r3MidLineHT = na
var line r4MidLineHT = na
var line r5MidLineHT = na
var line s1MidLineHT = na
var line s2MidLineHT = na
var line s3MidLineHT = na
var line s4MidLineHT = na
var line s5MidLineHT = na
var label pLabelHT = na
var label r1LabelHT = na
var label r2LabelHT = na
var label r3LabelHT = na
var label r4LabelHT = na
var label r5LabelHT = na
var label r1MidLabelHT = na
var label r2MidLabelHT = na
var label r3MidLabelHT = na
var label r4MidLabelHT = na
var label r5MidLabelHT = na
var label s1LabelHT = na
var label s2LabelHT = na
var label s3LabelHT = na
var label s4LabelHT = na
var label s5LabelHT = na
var label s1MidLabelHT = na
var label s2MidLabelHT = na
var label s3MidLabelHT = na
var label s4MidLabelHT = na
var label s5MidLabelHT = na
if pLevelHT[1] != pLevelHT
    if pLineStyleHT != 'Hidden'
        pLineHT := CreateTheLineHT(pLineHT, pLevelHT, plineWgtHT, plineColourHT, pLineStyleHT)  //, "P (" + tostring(pLevel) + ")")
        pLabelHT := CreateTheLabelHT(levelHT=pLevelHT, colourHT=plineColourHT, styleHT=label.style_none, labelTextHT='P')  // (" + tostring(pLevel) + ")")
        pLabelHT
        //pLabel := label.new(bar_index, pLevel, "PTest", style=label.style_none)
    if r1LineStyleHT != 'Hidden'
        r1LineHT := CreateTheLineHT(r1LineHT, r1LevelHT, r1lineWgtHT, r1lineColourHT, r1LineStyleHT)  //, "R1 (" + tostring(r1Level) + ")")
        r1LabelHT := CreateTheLabelHT(levelHT=r1LevelHT, colourHT=r1lineColourHT, styleHT=label.style_none, labelTextHT='R1')  // (" + tostring(r1Level) + ")")
        r1LabelHT
    if r2LineStyleHT != 'Hidden'
        r2LineHT := CreateTheLineHT(r2LineHT, r2LevelHT, r2lineWgtHT, r2lineColourHT, r2LineStyleHT)  //, "R2 (" + tostring(r2Level) + ")")
        r2LabelHT := CreateTheLabelHT(levelHT=r2LevelHT, colourHT=r2lineColourHT, styleHT=label.style_none, labelTextHT='R2')  // (" + tostring(r2Level) + ")")
        r2LabelHT
    if r3LineStyleHT != 'Hidden'
        r3LineHT := CreateTheLineHT(r3LineHT, r3LevelHT, r3lineWgtHT, r3lineColourHT, r3LineStyleHT)  //, "R3 (" + tostring(r3Level) + ")")
        r3LabelHT := CreateTheLabelHT(levelHT=r3LevelHT, colourHT=r3lineColourHT, styleHT=label.style_none, labelTextHT='R3')  // (" + tostring(r3Level) + ")")
        r3LabelHT
    if r4LineStyleHT != 'Hidden'
        r4LineHT := CreateTheLineHT(r4LineHT, r4LevelHT, r4lineWgtHT, r4lineColourHT, r4LineStyleHT)  //, "r4 (" + tostring(r4Level) + ")")
        r4LabelHT := CreateTheLabelHT(levelHT=r4LevelHT, colourHT=r4lineColourHT, styleHT=label.style_none, labelTextHT='R4')  // (" + tostring(r5Level) + ")")
        r4LabelHT
    if r5LineStyleHT != 'Hidden'
        r5LineHT := CreateTheLineHT(r5LineHT, r5LevelHT, r5lineWgtHT, r5lineColourHT, r5LineStyleHT)  //, "r5 (" + tostring(r5Level) + ")")
        r5LabelHT := CreateTheLabelHT(levelHT=r5LevelHT, colourHT=r5lineColourHT, styleHT=label.style_none, labelTextHT='R5')  // (" + tostring(r5Level) + ")")
        r5LabelHT
    if s1LineStyleHT != 'Hidden'
        s1LineHT := CreateTheLineHT(s1LineHT, s1LevelHT, s1lineWgtHT, s1lineColourHT, s1LineStyleHT)  //, "S1 (" + tostring(s1Level) + ")")
        s1LabelHT := CreateTheLabelHT(levelHT=s1LevelHT, colourHT=s1lineColourHT, styleHT=label.style_none, labelTextHT='S1')  // (" + tostring(s1Level) + ")")
        s1LabelHT
    if s2LineStyleHT != 'Hidden'
        s2LineHT := CreateTheLineHT(s2LineHT, s2LevelHT, s2lineWgtHT, s2lineColourHT, s2LineStyleHT)  //, "S2 (" + tostring(s2Level) + ")")
        s2LabelHT := CreateTheLabelHT(levelHT=s2LevelHT, colourHT=s2lineColourHT, styleHT=label.style_none, labelTextHT='S2')  // (" + tostring(s2Level) + ")")
        s2LabelHT
    if s3LineStyleHT != 'Hidden'
        s3LineHT := CreateTheLineHT(s3LineHT, s3LevelHT, s3lineWgtHT, s3lineColourHT, s3LineStyleHT)  //, "S3 (" + tostring(s3Level) + ")")
        s3LabelHT := CreateTheLabelHT(levelHT=s3LevelHT, colourHT=s3lineColourHT, styleHT=label.style_none, labelTextHT='S3')  // (" + tostring(s3Level) + ")")
        s3LabelHT
    if s4LineStyleHT != 'Hidden'
        s4LineHT := CreateTheLineHT(s4LineHT, s4LevelHT, s4lineWgtHT, s4lineColourHT, s4LineStyleHT)  //, "s4 (" + tostring(s4Level) + ")")
        s4LabelHT := CreateTheLabelHT(levelHT=s4LevelHT, colourHT=s4lineColourHT, styleHT=label.style_none, labelTextHT='S4')  // (" + tostring(s4Level) + ")")
        s4LabelHT
    if s5LineStyleHT != 'Hidden'
        s5LineHT := CreateTheLineHT(s5LineHT, s5LevelHT, s5lineWgtHT, s5lineColourHT, s5LineStyleHT)  //, "s5 (" + tostring(s5Level) + ")")
        s5LabelHT := CreateTheLabelHT(levelHT=s5LevelHT, colourHT=s5lineColourHT, styleHT=label.style_none, labelTextHT='S5')  // (" + tostring(s3Level) + ")")
        s5LabelHT
    if r1MidLineStyleHT != 'Hidden'
        r1MidLineHT := CreateTheLineHT(r1MidLineHT, r1MidLevelHT, r1MidlineWgtHT, r1MidlineColourHT, r1MidLineStyleHT)  //, "MID (" + tostring(r1MidLevel) + ")")
        r1MidLabelHT := CreateTheLabelHT(levelHT=r1MidLevelHT, colourHT=r1MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(r1MidLevel) + ")")
        r1MidLabelHT
    if r2MidLineStyleHT != 'Hidden'
        r2MidLineHT := CreateTheLineHT(r2MidLineHT, r2MidLevelHT, r2MidlineWgtHT, r2MidlineColourHT, r2MidLineStyleHT)  //, "MID (" + tostring(r2MidLevel) + ")")
        r2MidLabelHT := CreateTheLabelHT(levelHT=r2MidLevelHT, colourHT=r2MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(r2MidLevel) + ")")
        r2MidLabelHT
    if r3MidLineStyleHT != 'Hidden'
        r3MidLineHT := CreateTheLineHT(r3MidLineHT, r3MidLevelHT, r3MidlineWgtHT, r3MidlineColourHT, r3MidLineStyleHT)  //, "MID (" + tostring(r3MidLevel) + ")")
        r3MidLabelHT := CreateTheLabelHT(levelHT=r3MidLevelHT, colourHT=r3MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(r3MidLevel) + ")")
        r3MidLabelHT
    if r4MidLineStyleHT != 'Hidden'
        r4MidLineHT := CreateTheLineHT(r4MidLineHT, r4MidLevelHT, r4MidlineWgtHT, r4MidlineColourHT, r4MidLineStyleHT)  //, "MID (" + tostring(r4MidLevel) + ")")
        r4MidLabelHT := CreateTheLabelHT(levelHT=r4MidLevelHT, colourHT=r4MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(r4MidLevel) + ")")
        r4MidLabelHT
    if r5MidLineStyleHT != 'Hidden'
        r5MidLineHT := CreateTheLineHT(r5MidLineHT, r5MidLevelHT, r5MidlineWgtHT, r5MidlineColourHT, r5MidLineStyleHT)  //, "MID (" + tostring(r5MidLevel) + ")")
        r5MidLabelHT := CreateTheLabelHT(levelHT=r5MidLevelHT, colourHT=r5MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(r3MidLevel) + ")")
        r5MidLabelHT
    if s1MidLineStyleHT != 'Hidden'
        s1MidLineHT := CreateTheLineHT(s1MidLineHT, s1MidLevelHT, s1MidlineWgtHT, s1MidlineColourHT, s1MidLineStyleHT)  //, "MID (" + tostring(s1MidLevel) + ")")
        s1MidLabelHT := CreateTheLabelHT(levelHT=s1MidLevelHT, colourHT=s1MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(s1MidLevel) + ")")
        s1MidLabelHT
    if s2MidLineStyleHT != 'Hidden'
        s2MidLineHT := CreateTheLineHT(s2MidLineHT, s2MidLevelHT, s2MidlineWgtHT, s2MidlineColourHT, s2MidLineStyleHT)  //, "MID (" + tostring(s2MidLevel) + ")")
        s2MidLabelHT := CreateTheLabelHT(levelHT=s2MidLevelHT, colourHT=s2MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(s2MidLevel) + ")")
        s2MidLabelHT
    if s3MidLineStyleHT != 'Hidden'
        s3MidLineHT := CreateTheLineHT(s3MidLineHT, s3MidLevelHT, s3MidlineWgtHT, s3MidlineColourHT, s3MidLineStyleHT)  //, "MID (" + tostring(s3MidLevel) + ")")
        s3MidLabelHT := CreateTheLabelHT(levelHT=s3MidLevelHT, colourHT=s3MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(s3MidLevel) + ")")
        s3MidLabelHT
    if s4MidLineStyleHT != 'Hidden'
        s4MidLineHT := CreateTheLineHT(s4MidLineHT, s4MidLevelHT, s4MidlineWgtHT, s4MidlineColourHT, s4MidLineStyleHT)  //, "MID (" + tostring(s4MidLevel) + ")")
        s4MidLabelHT := CreateTheLabelHT(levelHT=s4MidLevelHT, colourHT=s4MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(s4MidLevel) + ")")
        s4MidLabelHT
    if s5MidLineStyleHT != 'Hidden'
        s5MidLineHT := CreateTheLineHT(s5MidLineHT, s5MidLevelHT, s5MidlineWgtHT, s5MidlineColourHT, s5MidLineStyleHT)  //, "MID (" + tostring(s5MidLevel) + ")")
        s5MidLabelHT := CreateTheLabelHT(levelHT=s5MidLevelHT, colourHT=s5MidlineColourHT, styleHT=label.style_none, labelTextHT='MID')  // (" + tostring(s3MidLevel) + ")")
        s5MidLabelHT

if not na(pLineHT) and line.get_x2(pLineHT) != bar_index
    line.set_x2(r1LineHT, bar_index)
    line.set_x2(pLineHT, bar_index)
    line.set_x2(s1LineHT, bar_index)
    line.set_x2(s1MidLineHT, bar_index)
    line.set_x2(r1MidLineHT, bar_index)
    line.set_x2(r2LineHT, bar_index)
    line.set_x2(r3LineHT, bar_index)
    line.set_x2(r4LineHT, bar_index)
    line.set_x2(r5LineHT, bar_index)
    line.set_x2(s2LineHT, bar_index)
    line.set_x2(s3LineHT, bar_index)
    line.set_x2(s4LineHT, bar_index)
    line.set_x2(s5LineHT, bar_index)
    line.set_x2(r2MidLineHT, bar_index)
    line.set_x2(r3MidLineHT, bar_index)
    line.set_x2(r4MidLineHT, bar_index)
    line.set_x2(r5MidLineHT, bar_index)
    line.set_x2(s2MidLineHT, bar_index)
    line.set_x2(s3MidLineHT, bar_index)
    line.set_x2(s4MidLineHT, bar_index)
    line.set_x2(s5MidLineHT, bar_index)
    if lblsOnRightHT  // if labels should be displayed on right, move to the location of the last bar.
        label.set_x(pLabelHT, bar_index)
        label.set_x(r1LabelHT, bar_index)
        label.set_x(r2LabelHT, bar_index)
        label.set_x(r3LabelHT, bar_index)
        label.set_x(r4LabelHT, bar_index)
        label.set_x(r5LabelHT, bar_index)
        label.set_x(r1MidLabelHT, bar_index)
        label.set_x(r2MidLabelHT, bar_index)
        label.set_x(r3MidLabelHT, bar_index)
        label.set_x(r4MidLabelHT, bar_index)
        label.set_x(r5MidLabelHT, bar_index)
        label.set_x(s1LabelHT, bar_index)
        label.set_x(s2LabelHT, bar_index)
        label.set_x(s3LabelHT, bar_index)
        label.set_x(s4LabelHT, bar_index)
        label.set_x(s5LabelHT, bar_index)
        label.set_x(s1MidLabelHT, bar_index)
        label.set_x(s2MidLabelHT, bar_index)
        label.set_x(s3MidLabelHT, bar_index)
        label.set_x(s4MidLabelHT, bar_index)
        label.set_x(s5MidLabelHT, bar_index)

// Get user input
//rsiSource = input(title='RSI Source', defval=close)
//rsiLength = input(title='RSI Length', defval=14)
//rsiOverbought = input(title='RSI Overbought Level', defval=60)
//rsiOversold = input(title='RSI Oversold Level', defval=40)
ttmLow = input(title='TTM Low', defval=-1)
ttmHigh = input(title='TTM High', defval=1)
// Get RSI Value
//rsiValue = ta.rsi(rsiSource, rsiLength)
//isRsiOB = rsiValue >= rsiOverbought
//isRsiOS = rsiValue <= rsiOversold
// TTM SQUEEZE
length = input.int(title='TTM Length', defval=20, minval=0)
bband(length, mult) =>
    ta.sma(close, length) + mult * ta.stdev(close, length)
keltner(length, mult) =>
    ta.ema(close, length) + mult * ta.ema(ta.tr, length)

e1 = (ta.highest(high, length) + ta.lowest(low, length)) / 2 + ta.sma(close, length)
osc = ta.linreg(close - e1 / 2, length, 0)
diff = bband(length, 2) - keltner(length, 1)
ttmL = osc < ttmLow and rsiValue <= rsiOversold
ttmH = osc > ttmHigh and rsiValue >= rsiOverbought
// Plot signals to chart

plotshape(ttmH, title='Overbought', location=location.abovebar, color=color.new(color.red, 0), style=shape.arrowdown, size=size.auto)
plotshape(ttmL, title='Oversold', location=location.belowbar, color=color.new(color.green, 0), style=shape.arrowup, size=size.auto)



// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Beardy_Fred

//@version=5
indicator(title="10X Bars", shorttitle="10X", overlay = true)

//INPUTS
len         = input.int(14, "Directional Length")
ADX_T       = input.int(20, "ADX Length")
vol_len     = input.int(20, "Volume Length")
vol_trigger = input.int(50, "Volume % Above Average Trigger", minval=5)

//DMI CALCULATIONS - Tradingview Built-In DMI Indicator
up          = ta.change(high)
down        = -ta.change(low)
plusDM      = na(up) ? na : (up > down and up > 0 ? up : 0)
minusDM     = na(down) ? na : (down > up and down > 0 ? down : 0)
trur        = ta.rma(ta.tr, len)
plus        = fixnan(100 * ta.rma(plusDM, len) / trur)
minus       = fixnan(100 * ta.rma(minusDM, len) / trur)
sum         = plus + minus
adx         = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), len)

//10X CALCULATIONS
D_Up        = (plus > minus) and (adx > ADX_T)
D_Down      = (minus > plus) and (adx > ADX_T)
sideways    = (adx < ADX_T)
Bar_Color   = sideways ? color.new(color.yellow, 0) : D_Up ? color.new(color.green, 0) : D_Down ? color.new(color.red, 0) :  na

//PLOT
barcolor(color=Bar_Color)

//SPIKES ABOVE AVERAGE VOLUME
Avg_Vol     = ta.sma(volume, vol_len)
Vol_Spike   = (1 + (vol_trigger / 100)) * Avg_Vol
plotchar(volume > Vol_Spike, "Volume Spike", char = '◉', location = location.bottom, color = color.new(color.aqua, 0), size = size.tiny)


// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Beardy_Fred

//@version=5
indicator(title="10X Market", overlay = false)

//LENGTH INPUTS
len = input(14, "Directional Length")
ADX_T = input(20, "ADX Length")
vol_len = input(20, "Volume Length")

//TICKER INPUTS
Ticker1= input.symbol(title="Symbol_1", defval="CME_MINI:ES1!")
Ticker2= input.symbol(title="Symbol_2", defval="CME_MINI:NQ1!")
Ticker3= input.symbol(title="Symbol_3", defval="AMEX:SPY")
Ticker4= input.symbol(title="Symbol_4", defval="NASDAQ:QQQ")
Ticker5= input.symbol(title="Symbol_5", defval="AMEX:IWM")
Ticker6= input.symbol(title="Symbol_6", defval="AMEX:XLC")
Ticker7= input.symbol(title="Symbol_7", defval="AMEX:XLY")
Ticker8= input.symbol(title="Symbol_8", defval="AMEX:XLP")
Ticker9= input.symbol(title="Symbol_9", defval="AMEX:XLE")
Ticker10= input.symbol(title="Symbol_10", defval="AMEX:XLF")
Ticker11= input.symbol(title="Symbol_11", defval="AMEX:XLV")
Ticker12= input.symbol(title="Symbol_12", defval="AMEX:XLI")
Ticker13= input.symbol(title="Symbol_13", defval="AMEX:XLB")
Ticker14= input.symbol(title="Symbol_14", defval="AMEX:XLRE")
Ticker15= input.symbol(title="Symbol_15", defval="AMEX:XLK")
Ticker16= input.symbol(title="Symbol_16", defval="AMEX:XLU")

// DMI CALCULATIONS
up = ta.change(high)
down = -ta.change(low)
plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
trur = ta.rma(ta.tr, len)
plus = fixnan(100 * ta.rma(plusDM, len) / trur)
minus = fixnan(100 * ta.rma(minusDM, len) / trur)
sum = plus + minus
adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), len)

//10X CALCULATIONS
D_Up = (plus > minus) and (adx > ADX_T)
D_Down = (minus > plus) and (adx > ADX_T)
uptrend = D_Up 
downtrend = D_Down
sideways = (adx < ADX_T)
Bar_Color = sideways ? color.yellow : uptrend ? color.green : downtrend ? color.red :  na

[SC_1] = request.security(Ticker1, timeframe.period, [Bar_Color])
[SC_2] = request.security(Ticker2, timeframe.period, [Bar_Color])
[SC_3] = request.security(Ticker3, timeframe.period, [Bar_Color])
[SC_4] = request.security(Ticker4, timeframe.period, [Bar_Color])
[SC_5] = request.security(Ticker5, timeframe.period, [Bar_Color])
[SC_6] = request.security(Ticker6, timeframe.period, [Bar_Color])
[SC_7] = request.security(Ticker7, timeframe.period, [Bar_Color])
[SC_8] = request.security(Ticker8, timeframe.period, [Bar_Color])
[SC_9] = request.security(Ticker9, timeframe.period, [Bar_Color])
[SC_10] = request.security(Ticker10, timeframe.period, [Bar_Color])
[SC_11] = request.security(Ticker11, timeframe.period, [Bar_Color])
[SC_12] = request.security(Ticker12, timeframe.period, [Bar_Color])
[SC_13] = request.security(Ticker13, timeframe.period, [Bar_Color])
[SC_14] = request.security(Ticker14, timeframe.period, [Bar_Color])
[SC_15] = request.security(Ticker15, timeframe.period, [Bar_Color])
[SC_16] = request.security(Ticker16, timeframe.period, [Bar_Color])

// PLOTS //
l_width = 2
shape = plot.style_circles

hline(19, color=color.gray, linestyle = hline.style_dotted)
plot(18, color=SC_1, style=shape, linewidth=l_width)
plot(17, color=SC_2, style=shape, linewidth=l_width)
hline(16, color=color.gray, linestyle = hline.style_dotted)
plot(15, color=SC_3, style=shape, linewidth=l_width)
plot(14, color=SC_4, style=shape, linewidth=l_width)
plot(13, color=SC_5, style=shape, linewidth=l_width)
hline(12, color=color.gray, linestyle = hline.style_dotted)
plot(11, color=SC_6, style=shape, linewidth=l_width)
plot(10, color=SC_7, style=shape, linewidth=l_width)
plot(9, color=SC_8, style=shape, linewidth=l_width)
plot(8, color=SC_9, style=shape, linewidth=l_width)
plot(7, color=SC_10, style=shape, linewidth=l_width)
plot(6, color=SC_11, style=shape, linewidth=l_width)
plot(5, color=SC_12, style=shape, linewidth=l_width)
plot(4, color=SC_13, style=shape, linewidth=l_width)
plot(3, color=SC_14, style=shape, linewidth=l_width)
plot(2, color=SC_15, style=shape, linewidth=l_width)
plot(1, color=SC_16, style=shape, linewidth=l_width)
hline(0, color=color.gray, linestyle = hline.style_dotted)

//TICKER LABELS//
Tick_Style = label.style_none
Tick_Color = color.new(color.white, 0)
Tick_Size = size.small
Tick_Pos = bar_index + 2 // distance label is from 1st dot

getName(_str) =>
    string[] _pair = str.split(_str, ":")
    string[] _chars = str.split(array.get(_pair, 1), "")
    int _len = array.size(_chars) - 0
    string[] _substr = array.new_string(0)
    _substr := array.slice(_chars, 0, _len)
    string _return = array.join(_substr, "")

L1= label.new(Tick_Pos, 17.75, text=getName(Ticker1), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L1[1])
L2= label.new(Tick_Pos, 16.75, text=getName(Ticker2), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L2[1])
L3= label.new(Tick_Pos, 14.75, text=getName(Ticker3), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L3[1])
L4= label.new(Tick_Pos, 13.75, text=getName(Ticker4), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L4[1])
L5= label.new(Tick_Pos, 12.75, text=getName(Ticker5), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L5[1])
L6= label.new(Tick_Pos, 10.75, text=getName(Ticker6), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L6[1])
L7= label.new(Tick_Pos, 9.75, text=getName(Ticker7), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L7[1])
L8= label.new(Tick_Pos, 8.75, text=getName(Ticker8), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L8[1])
L9= label.new(Tick_Pos, 7.75, text=getName(Ticker9), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L9[1])
L10= label.new(Tick_Pos, 6.75, text=getName(Ticker10), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L10[1])
L11= label.new(Tick_Pos, 5.75, text=getName(Ticker11), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L11[1])
L12= label.new(Tick_Pos, 4.75, text=getName(Ticker12), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L12[1])
L13= label.new(Tick_Pos, 3.75, text=getName(Ticker13), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L13[1])
L14= label.new(Tick_Pos, 2.75, text=getName(Ticker14), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L14[1])
L15= label.new(Tick_Pos, 1.75, text=getName(Ticker15), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L15[1])
L16= label.new(Tick_Pos, 0.75, text=getName(Ticker16), style=Tick_Style, textcolor=Tick_Color, size=Tick_Size)
label.delete(L16[1])



//This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//© MattDeLong

//@version=4
study("13ema BSOS", overlay=true)
ema13 = security(syminfo.tickerid, '1D', ema(close, 13))
ema34 = security(syminfo.tickerid, '1D', ema(close, 34))
plot(ema13, linewidth=2, color=color.rgb(92, 91, 84), editable=true)
plot(ema34, linewidth=2, color=color.aqua, editable=true)

//breakAbove = (close > ema13 and close[1] <= ema13[1]) ? 1 : 0
//breakBelow = (close < ema13 and close[1] >= ema13[1]) ? 1 : 0
//plotshape((breakBelow[1] or breakBelow[2]) and breakAbove, style=shape.triangleup, location=location.belowbar, color=color.teal, size=size.small)
plotshape(close[1] < ema13[1] and close > ema13 and close > ema34 and ema13>ema34, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)




//This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//© MattDeLong

//@version=4
study("50ema + 105ema", overlay=true)
ema105 = security(syminfo.tickerid, '30', ema(close, 105))
ema50 = security(syminfo.tickerid, '30', ema(close, 50))

aa = plot(timeframe.isintraday ? ema50 : na, linewidth=1, color=color.teal, editable=true)
bb = plot(timeframe.isintraday ? ema105 : na,linewidth=2, color=color.teal, editable=true)
fill(aa, bb, color=color.gray)

body = abs(open-close)
us = open < close ? high-close : high-open
ls = open < close ? open-low : close-low

// data = (us < body*0.1 and ls>body*2)
hammer = us < body * 0.2 and ls > body * 2
//inverted_hammer = ls < body*0.2 and us>body*2/plotshape(hammer, style=shape.cross, location=location.belowbar, color=color.green, size=size.small)


// === ALERT === 
//alertcondition(hammer, title="Hammer Buy", message="Hammer: Play break higher")



//This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//© MattDeLong

//@version=4
study("50ema + 105ema", overlay=true)
ema105 = security(syminfo.tickerid, '30', ema(close, 105))
ema50 = security(syminfo.tickerid, '30', ema(close, 50))

aa = plot(timeframe.isintraday ? ema50 : na, linewidth=1, color=color.teal, editable=true)
bb = plot(timeframe.isintraday ? ema105 : na,linewidth=2, color=color.teal, editable=true)
fill(aa, bb, color=color.gray)

body = abs(open-close)
us = open < close ? high-close : high-open
ls = open < close ? open-low : close-low

// data = (us < body*0.1 and ls>body*2)
hammer = us < body * 0.2 and ls > body * 2
//inverted_hammer = ls < body*0.2 and us>body*2/plotshape(hammer, style=shape.cross, location=location.belowbar, color=color.green, size=size.small)


// === ALERT === 
//alertcondition(hammer, title="Hammer Buy", message="Hammer: Play break higher")



//@version=5
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //
//# * ══════════════════════════════════════════════════════════════════════════════════════════════
//# *
//# * Study       : Auto Fib Channels
//# *                - Auto Fib Channels, derived from build-in Auto Fib Retracement
//# *                - Auto Fib Retracement, build-in, customized to fit with Auto Fib Channels
//# *                - Zig Zag, derived from build-in Auto Fib Retracement 
//# * Author      : © dgtrd
//# *
//# * Revision History
//# *  Release    : Apr 05, 2021
//# *  Update     : Apr 13, 2021 : Fibonacci Extensions are added as an alternative option to Fibonacci Retracements
//# *  Update     : Feb 15, 2022 : Thanks to New Pine Feature, added backgroud coloring option
//# *
//# * ══════════════════════════════════════════════════════════════════════════════════════════════
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //

indicator('Auto Fib Channels by DGT', 'FibChannels ʙʏ DGT ☼☾', true, max_lines_count=144)

// -Inputs ══════════════════════════════════════════════════════════════════════════════════════ //
tooltip_threshold = 'Deviation is a multiplier that affects how much the price should deviate from the previous pivot in order for the bar to become a new pivot' + 
                     '\n\nDepth affects the minimum number of bars that will be taken into account when building'

// ---------------------------------------------------------------------------------------- //
// pivots threshold

threshold_multiplier = input.float(3, 'Deviation', minval=0, inline='Pivots', tooltip=tooltip_threshold)
dev_threshold        = ta.atr(10) / close * 100 * threshold_multiplier
depth                = input.int(11, 'Depth', minval=1, inline='Pivots')

// pivots threshold
// ---------------------------------------------------------------------------------------- //
// Zig Zag

ZigZag  = input.bool(false, 'Zig Zag', inline='ZZ', group='Zig Zag Settings')
zzColor = input.color(color.orange, '', inline='ZZ', group='Zig Zag Settings')
zzWidth = input.int(1, '', minval=1, inline='ZZ', group='Zig Zag Settings')
zzStyle = input.string('Solid', '', options=['Dashed', 'Dotted', 'Solid'], inline='ZZ', group='Zig Zag Settings')

// Zig Zag
// ---------------------------------------------------------------------------------------- //
// Fibonacci 

group_fib_RetExt = 'Channel / Retracement-Extention Settings'

isFibChannel  = input.bool(true, 'Fib Channel     |   ', inline='FIB', group=group_fib_RetExt)
fibExtRet     = input.string('Fib Retracement', '', options=['Fib Retracement', 'Fib Extention'], inline='FIB', group=group_fib_RetExt)

isFibRetOrExt = input.bool(true, '', inline='FIB', group=group_fib_RetExt)

histPivot     = input.int(0, 'Historical Channels / Retracements-Extentions', minval=0, inline='hPVT', group=group_fib_RetExt)
extendL       = input.bool(false, 'Extend Lines', group=group_fib_RetExt)
reverse       = input.bool(false, 'Reverse Retracement-Extention Levels', group=group_fib_RetExt)

bgChannel     = input.bool(true, 'Channel Background', group=group_fib_RetExt)

channelLevels = input.bool(true, 'Level Labels : Channel | Retracement-Extention', inline='Levels', group=group_fib_RetExt)
retExtLevels  = input.bool(true, '', inline='Levels', group=group_fib_RetExt)
levelPrices   = input.bool(true, 'Prices    |    Levels', inline='Levels2', group=group_fib_RetExt)
levelLevels   = input.bool(true, '', inline='Levels2', group=group_fib_RetExt)
levelFormat   = input.string('Values', '', options=['Values', 'Percent'], inline='Levels2', group=group_fib_RetExt)

uniColor      = input.bool(false, 'UniColor : Channels | Retracements-Extentions', inline='uni', group=group_fib_RetExt)
uniColor1     = input.color(#0ac9f0, '', inline='uni', group=group_fib_RetExt)
uniColor2     = input.color(#ffa726, '', inline='uni', group=group_fib_RetExt)
// Fibonacci 
// ---------------------------------------------------------------------------------------- //

// -Calculations ════════════════════════════════════════════════════════════════════════════════ //

var line lineLast = na
var int iLast     = 0
var int iPrev     = 0
var float pLast   = 0
var isHighLast    = false  // otherwise the last pivot is a low pivot

var iPrevPivot = 0
var pPrevPivot = 0.
var iLastPivot = 0
var pLastPivot = 0.

pivots(src, length, isHigh) =>
    l2 = length * 2
    c = nz(src[length])
    ok = true

    for i = 0 to l2 by 1
        if isHigh and src[i] > c
            ok := false
            ok

        if not isHigh and src[i] < c
            ok := false
            ok
    if ok
        [bar_index[length], c]
    else
        [int(na), float(na)]

[iH, pH] = pivots(high, depth / 2, true )
[iL, pL] = pivots(low , depth / 2, false)

calc_dev(base_price, price) =>
    100 * (price - base_price) / price

pivotFound(dev, isHigh, index, price) =>
    if isHighLast == isHigh and not na(lineLast)
        // same direction
        if isHighLast ? price > pLast : price < pLast
            line.set_xy2(lineLast, index, price)
            [lineLast, isHighLast]
        else
            [line(na), bool(na)]
    else
        // reverse the direction (or create the very first line)
        if math.abs(dev) > dev_threshold
            // price move is significant

            // ---------------------------------------------------------------------------------------- //
            [zzCol, zzWid, zzSty] = if not ZigZag
                [na, 1, line.style_dashed]
            else
                [zzColor, zzWidth, zzStyle == 'Solid' ? line.style_solid : zzStyle == 'Dotted' ? line.style_dotted : line.style_dashed]
            // ---------------------------------------------------------------------------------------- //

            id = line.new(iLast, pLast, index, price, color=zzCol, width=zzWid, style=zzSty)
            [id, isHigh]
        else
            [line(na), bool(na)]

if not na(iH)
    dev = calc_dev(pLast, pH)
    [id, isHigh] = pivotFound(dev, true, iH, pH)

    if not na(id)
        if id != lineLast
            // ---------------------------------------------------------------------------------------- //
            iPrevPivot := line.get_x1(lineLast)
            pPrevPivot := line.get_y1(lineLast)
            iLastPivot := line.get_x2(lineLast)
            pLastPivot := line.get_y2(lineLast)

            if not ZigZag
            // ---------------------------------------------------------------------------------------- //

                line.delete(lineLast)

        lineLast := id
        isHighLast := isHigh
        iPrev := iLast
        iLast := iH
        pLast := pH
        pLast
else
    if not na(iL)
        dev = calc_dev(pLast, pL)
        [id, isHigh] = pivotFound(dev, false, iL, pL)

        if not na(id)
            if id != lineLast
                // ---------------------------------------------------------------------------------------- //
                iPrevPivot := line.get_x1(lineLast)
                pPrevPivot := line.get_y1(lineLast)
                iLastPivot := line.get_x2(lineLast)
                pLastPivot := line.get_y2(lineLast)

                if not ZigZag
                // ---------------------------------------------------------------------------------------- //

                    line.delete(lineLast)

            lineLast := id
            isHighLast := isHigh
            iPrev := iLast
            iLast := iL
            pLast := pL
            pLast

iStartBase = histPivot > 0 ? ta.valuewhen(ta.change(iPrevPivot), iPrevPivot, histPivot)     : ta.valuewhen(ta.change(iPrevPivot), iPrevPivot, 0)
pStartBase = histPivot > 0 ? ta.valuewhen(ta.change(pPrevPivot), pPrevPivot, histPivot)     : ta.valuewhen(ta.change(pPrevPivot), pPrevPivot, 0)
iEndBase   = histPivot > 0 ? ta.valuewhen(ta.change(iLastPivot), iLastPivot, histPivot - 1) : line.get_x2(lineLast)
pEndBase   = histPivot > 0 ? ta.valuewhen(ta.change(pLastPivot), pLastPivot, histPivot - 1) : line.get_y2(lineLast)
iMidPivot  = histPivot > 0 ? ta.valuewhen(ta.change(iPrevPivot), iPrevPivot, histPivot - 1) : line.get_x1(lineLast)
pMidPivot  = histPivot > 0 ? ta.valuewhen(ta.change(pPrevPivot), pPrevPivot, histPivot - 1) : line.get_y1(lineLast)

slope      = (pEndBase - pStartBase) / (iEndBase - iStartBase)

iPivotDiff = iMidPivot - iStartBase
pPivotDiff = math.abs(pMidPivot - pStartBase)

f_crossingLevel(sr, r) =>
    r > sr and r < sr[1] or r < sr and r > sr[1]

var a_ln = array.new_line()
var a_lf = array.new_linefill()
var a_cl = array.new_color()

if ta.change(time) and array.size(a_ln) > 0
    for i = 1 to array.size(a_ln) by 1
        line.delete(array.shift(a_ln))

if ta.change(time) and array.size(a_lf) > 0
    for i = 1 to array.size(a_lf) by 1
        linefill.delete(array.shift(a_lf))

f_drawLineX(_iStart, _pStart, _iEnd, _pEnd, _color, _width, _style, _extend, _level) =>
    style = _style == 'Solid' ? line.style_solid : _style == 'Dotted' ? line.style_dotted : line.style_dashed

    if _iStart < bar_index + 500
        array.push(a_ln, line.new(_iStart, _pStart, _iEnd, _pEnd, xloc.bar_index, extendL ? extend.both : extend.right, _color, style, _width))

f_drawLine(_price, _color, _ext) =>
    var id = line.new(iLast, _price, bar_index, _price, xloc.bar_index, extendL ? extend.both : extend.right, _color, line.style_solid, 1)
    if not na(lineLast)
        line.set_xy1(id, _ext ? iMidPivot : iStartBase, _price)
        line.set_xy2(id, line.get_x2(lineLast), _price)

f_drawLabel(index, price, txt, colorx, txtColor, style, size, align, tooltip) =>
    labelsAlignStr = txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'

    var id = label.new(index, price, txt, color=colorx, textcolor=txtColor, style=style, size=size, textalign=align)
    label.set_xy(id, index, price)
    label.set_text(id, labelsAlignStr)
    label.set_textcolor(id, txtColor)
    label.set_tooltip(id, tooltip)

f_labelText(level, price, txt) =>
    l = levelFormat == 'Values' ? txt + str.tostring(level) : txt + str.tostring(level * 100) + '%'
    (levelLevels ? l : '') + (levelPrices ? ' (' + str.tostring(price, format.mintick) + ')' : '')

f_getTooltip(level, price, fibTool) =>
    fibTool + ' Level ' + str.tostring(level) + ' : ' + str.tostring(price, format.mintick)
    
if isFibChannel or (fibExtRet == 'Fib Extention' and isFibRetOrExt)
    array.push(a_ln, line.new(iStartBase, pStartBase, iMidPivot, pMidPivot, xloc.bar_index, extend.none, color.gray, line.style_dashed, 1))
    array.push(a_ln, line.new(iMidPivot , pMidPivot , iEndBase , pEndBase , xloc.bar_index, extend.none, color.gray, line.style_dashed, 1))
if fibExtRet == 'Fib Retracement' and isFibRetOrExt and not isFibChannel
    array.push(a_ln, line.new(iStartBase, pStartBase, iMidPivot, pMidPivot, xloc.bar_index, extend.none, color.gray, line.style_dashed, 1))

processLevel(show, value, colorL) =>
    if isFibChannel
        if show
            iStart    = int(math.round(iStartBase + iPivotDiff * value))
            intercept = pStartBase < pMidPivot ? pStartBase + pPivotDiff * value - slope * iStart : pStartBase - pPivotDiff * value - slope * iStart
            pStart    = slope * iStart + intercept
            iEnd      = iStart < iEndBase ? iEndBase : iStart + 1 // bar_index
            pEnd      = slope * iEnd + intercept
            pLastBar  = slope * bar_index + intercept

            f_drawLineX(iStart, pStart, iEnd, pEnd, uniColor ? uniColor1 : colorL, 1, 'Solid', true, value)

            if channelLevels
                f_drawLabel(bar_index, pLastBar, f_labelText(value, pLastBar, 'CHL '), #00000000                    , uniColor ? uniColor1 : colorL, label.style_label_left, size.normal, text.align_left, f_getTooltip(value, pLastBar, 'Fib Channel'))
                f_drawLabel(bar_index, pLastBar, ''                                   , uniColor ? uniColor1 : colorL, #00000000                    , label.style_circle    , size.auto  , text.align_left, '')

            if f_crossingLevel(close, pLastBar)
                alert('AutoFibChannel: ' + syminfo.ticker + ' crossing level ' + str.tostring(value))
            
            if bgChannel
                cLines = array.size(a_ln)
                if cLines == 3
                    array.push(a_cl, colorL)
                if cLines > 3
                    array.push(a_lf, linefill.new(array.get(a_ln, cLines - 2), array.get(a_ln, cLines - 1), color.new(array.pop(a_cl), 89)))
                    array.push(a_cl, colorL)

    if isFibRetOrExt
        r = 0.
        isExt = false

        if fibExtRet == 'Fib Extention'
            isExt := true
            offset = math.abs(pMidPivot - pEndBase)
            r := pEndBase < pMidPivot ? pMidPivot - offset + (reverse ? -1 : 1) * pPivotDiff * value : pMidPivot + offset - (reverse ? -1 : 1) * pPivotDiff * value
            r
        else
            r := pStartBase < pMidPivot ? (reverse ? pMidPivot : pStartBase) + (reverse ? -1 : 1) * pPivotDiff * value : (reverse ? pMidPivot : pStartBase) - (reverse ? -1 : 1) * pPivotDiff * value
            r

        if show
            f_drawLine(r, uniColor ? uniColor2 : colorL, isExt)

            if retExtLevels
                f_drawLabel(isExt ? iMidPivot : iStartBase, r, f_labelText(value, r, (isExt ? 'EXT ' : 'RET ')), #00000000, uniColor ? uniColor2 : colorL, label.style_label_right, size.normal, text.align_right, f_getTooltip(value, r, (isExt ? 'Fib Extention' : 'Fib Retracement')))

            if f_crossingLevel(close, r)
                alert('Autofib: ' + syminfo.ticker + ' crossing level ' + str.tostring(value))

group_fib_levels = 'Channel / Retracement-Extention Levels'

show_0          = input.bool (true   , '', inline='Level0' , group=group_fib_levels)
value_0         = input.float(0.     , '', inline='Level0' , group=group_fib_levels)
color_0         = input.color(#787b86, '', inline='Level0' , group=group_fib_levels)

show_0_236      = input.bool (true   , '', inline='Level0' , group=group_fib_levels)
value_0_236     = input.float(0.236  , '', inline='Level0' , group=group_fib_levels)
color_0_236     = input.color(#f44336, '', inline='Level0' , group=group_fib_levels)

show_0_382      = input.bool (true   , '', inline='Level1' , group=group_fib_levels)
value_0_382     = input.float(0.382  , '', inline='Level1' , group=group_fib_levels)
color_0_382     = input.color(#81c784, '', inline='Level1' , group=group_fib_levels)

show_0_5        = input.bool (true   , '', inline='Level1' , group=group_fib_levels)
value_0_5       = input.float(0.5    , '', inline='Level1' , group=group_fib_levels)
color_0_5       = input.color(#4caf50, '', inline='Level1' , group=group_fib_levels)

show_0_618      = input.bool (true   , '', inline='Level2' , group=group_fib_levels)
value_0_618     = input.float(0.618  , '', inline='Level2' , group=group_fib_levels)
color_0_618     = input.color(#009688, '', inline='Level2' , group=group_fib_levels)

show_0_65       = input.bool (false  , '', inline='Level2' , group=group_fib_levels)
value_0_65      = input.float(0.65   , '', inline='Level2' , group=group_fib_levels)
color_0_65      = input.color(#009688, '', inline='Level2' , group=group_fib_levels)

show_0_786      = input.bool (true   , '', inline='Level3' , group=group_fib_levels)
value_0_786     = input.float(0.786  , '', inline='Level3' , group=group_fib_levels)
color_0_786     = input.color(#64b5f6, '', inline='Level3' , group=group_fib_levels)


