show_1          = input.bool (true   , '', inline='Level3' , group=group_fib_levels)
value_1         = input.float(1.     , '', inline='Level3' , group=group_fib_levels)
color_1         = input.color(#787b86, '', inline='Level3' , group=group_fib_levels)

show_1_272      = input.bool (false  , '', inline='Level4' , group=group_fib_levels)
value_1_272     = input.float(1.272  , '', inline='Level4' , group=group_fib_levels)
color_1_272     = input.color(#81c784, '', inline='Level4' , group=group_fib_levels)

show_1_414      = input.bool (false  , '', inline='Level4' , group=group_fib_levels)
value_1_414     = input.float(1.414  , '', inline='Level4' , group=group_fib_levels)
color_1_414     = input.color(#f44336, '', inline='Level4' , group=group_fib_levels)

show_1_618      = input.bool (true   , '', inline='Level5' , group=group_fib_levels)
value_1_618     = input.float(1.618  , '', inline='Level5' , group=group_fib_levels)
color_1_618     = input.color(#2196f3, '', inline='Level5' , group=group_fib_levels)

show_1_65       = input.bool (false  , '', inline='Level5' , group=group_fib_levels)
value_1_65      = input.float(1.65   , '', inline='Level5' , group=group_fib_levels)
color_1_65      = input.color(#2196f3, '', inline='Level5' , group=group_fib_levels)

show_2_618      = input.bool (false  , '', inline='Level6' , group=group_fib_levels)
value_2_618     = input.float(2.618  , '', inline='Level6' , group=group_fib_levels)
color_2_618     = input.color(#f44336, '', inline='Level6' , group=group_fib_levels)

show_2_65       = input.bool (false  , '', inline='Level6' , group=group_fib_levels)
value_2_65      = input.float(2.65   , '', inline='Level6' , group=group_fib_levels)
color_2_65      = input.color(#f44336, '', inline='Level6' , group=group_fib_levels)

show_3_618      = input.bool (false  , '', inline='Level7' , group=group_fib_levels)
value_3_618     = input.float(3.618  , '', inline='Level7' , group=group_fib_levels)
color_3_618     = input.color(#9c27b0, '', inline='Level7' , group=group_fib_levels)

show_3_65       = input.bool (false  , '', inline='Level7' , group=group_fib_levels)
value_3_65      = input.float(3.65   , '', inline='Level7' , group=group_fib_levels)
color_3_65      = input.color(#9c27b0, '', inline='Level7' , group=group_fib_levels)

show_4_236      = input.bool (false  , '', inline='Level8' , group=group_fib_levels)
value_4_236     = input.float(4.236  , '', inline='Level8' , group=group_fib_levels)
color_4_236     = input.color(#e91e63, '', inline='Level8' , group=group_fib_levels)

show_4_618      = input.bool (false  , '', inline='Level8' , group=group_fib_levels)
value_4_618     = input.float(4.618  , '', inline='Level8' , group=group_fib_levels)
color_4_618     = input.color(#81c784, '', inline='Level8' , group=group_fib_levels)

show_neg_0_236  = input.bool (false  , '', inline='Level9' , group=group_fib_levels)
value_neg_0_236 = input.float(-0.236 , '', inline='Level9' , group=group_fib_levels)
color_neg_0_236 = input.color(#f44336, '', inline='Level9' , group=group_fib_levels)

show_neg_0_382  = input.bool (false  , '', inline='Level9' , group=group_fib_levels)
value_neg_0_382 = input.float(-0.382 , '', inline='Level9' , group=group_fib_levels)
color_neg_0_382 = input.color(#81c784, '', inline='Level9' , group=group_fib_levels)

show_neg_0_618  = input.bool (true   , '', inline='Level10', group=group_fib_levels)
value_neg_0_618 = input.float(-0.618 , '', inline='Level10', group=group_fib_levels)
color_neg_0_618 = input.color(#009688, '', inline='Level10', group=group_fib_levels)

show_neg_0_65   = input.bool (false  , '', inline='Level10', group=group_fib_levels)
value_neg_0_65  = input.float(-0.65  , '', inline='Level10', group=group_fib_levels)
color_neg_0_65  = input.color(#009688, '', inline='Level10', group=group_fib_levels)

processLevel(show_neg_0_65 , value_neg_0_65 , color_neg_0_65 )
processLevel(show_neg_0_618, value_neg_0_618, color_neg_0_618)
processLevel(show_neg_0_382, value_neg_0_382, color_neg_0_382)
processLevel(show_neg_0_236, value_neg_0_236, color_neg_0_236)
processLevel(show_0        , value_0        , color_0        )
processLevel(show_0_236    , value_0_236    , color_0_236    )
processLevel(show_0_382    , value_0_382    , color_0_382    )
processLevel(show_0_5      , value_0_5      , color_0_5      )
processLevel(show_0_618    , value_0_618    , color_0_618    )
processLevel(show_0_65     , value_0_65     , color_0_65     )
processLevel(show_0_786    , value_0_786    , color_0_786    )
processLevel(show_1        , value_1        , color_1        )
processLevel(show_1_272    , value_1_272    , color_1_272    )
processLevel(show_1_414    , value_1_414    , color_1_414    )
processLevel(show_1_618    , value_1_618    , color_1_618    )
processLevel(show_1_65     , value_1_65     , color_1_65     )
processLevel(show_2_618    , value_2_618    , color_2_618    )
processLevel(show_2_65     , value_2_65     , color_2_65     )
processLevel(show_3_618    , value_3_618    , color_3_618    )
processLevel(show_3_65     , value_3_65     , color_3_65     )
processLevel(show_4_236    , value_4_236    , color_4_236    )
processLevel(show_4_618    , value_4_618    , color_4_618    )

// Fibonacci 
// ---------------------------------------------------------------------------------------- //

var table logo = table.new(position.bottom_right, 1, 1)
table.cell(logo, 0, 0, '☼☾  ', text_size=size.normal, text_color=color.teal)


https://www.tradingview.com/script/0WOo54ab-Candle-Type-The-Strat/

//@version=4
////////////////////////////////////////////////////////////
//  Copyright by HPotter v1.0 25/12/2021
// This is combo strategies for get a cumulative signal. 
//
// First strategy
// This indicator plots 2/20 exponential moving average. For the Mov 
// Avg X 2/20 Indicator, the EMA bar will be painted when the Alert criteria is met.
//
// Second strategy
// This startegy based on 3-day pattern reversal described in "Are Three-Bar 
// Patterns Reliable For Stocks" article by Thomas Bulkowski, presented in 
// January,2000 issue of Stocks&Commodities magazine.
// That pattern conforms to the following rules:
// - It uses daily prices, not intraday or weekly prices;
// - The middle day of the three-day pattern has the lowest low of the three days, with no ties allowed;
// - The last day must have a close above the prior day's high, with no ties allowed;
// - Each day must have a nonzero trading range. 
//
// WARNING:
// - For purpose educate only
// - This script to change bars colors.
////////////////////////////////////////////////////////////
EMA20(Length ) =>
    pos = 0.0
    xPrice = close
    xXA = ema(xPrice, Length)
    nHH = max(high, high[1])
    nLL = min(low, low[1])
    nXS = iff((nLL > xXA)or(nHH < xXA), nLL, nHH)
    pos := iff(nXS > close[1] , -1, iff(nXS < close[1] , 1, nz(pos[1], 0))) 
	pos

BarR()=>
    pos = 0.0
    pos :=	iff(open[2] > close[2] and high[1] < high[2] and low[1] < low[2] and low[0] > low[1] and high[0] > high[1], 1,
    	     iff(open[2] < close[2] and high[1] > high[2] and low[1] > low[2] and high[0] < high[1] and low[0] < low[1], -1, nz(pos[1], 0))) 
    pos

strategy(title="Combo 2/20 EMA & 3 Day Pattern", shorttitle="Combo", overlay = true)
var I1  = "●═════ 2/20 EMA ═════●"
Length = input(14, minval=1, group = I1)
//var I2  = "●═════ 3-Bar-Reversal-Pattern ═════●"
var misc  = "●═════ MISC ═════●"
reverse = input(false, title="Trade reverse", group = misc)
var timePeriodHeader  = "●═════ Time Start ═════●"
d = input(1, title="From Day", minval=1, maxval=31, group=timePeriodHeader)
m = input(1, title="From Month", minval=1, maxval=12, group=timePeriodHeader)
y = input(2005, title="From Year", minval=0, group=timePeriodHeader)

StartTrade = time > timestamp(y, m, d, 00, 00) ? true : false
prePos3Bar = BarR()

posEMA20 = EMA20(Length)
pos3BarR = security(syminfo.tickerid, "D", prePos3Bar[1], barmerge.gaps_off, barmerge.lookahead_on)
pos = iff(posEMA20 == 1 and pos3BarR == 1 and StartTrade , 1,
	   iff(posEMA20 == -1 and pos3BarR == -1 and StartTrade, -1, 0)) 
possig = iff(reverse and pos == 1, -1,
          iff(reverse and pos == -1 , 1, pos))	   
if (possig == 1 ) 
    strategy.entry("Long", strategy.long)
if (possig == -1 )
    strategy.entry("Short", strategy.short)	 
if (possig == 0) 
    strategy.close_all()
barcolor(possig == -1 ? #b50404: possig == 1 ? #079605 : #0536b3 )


//@version=4
////////////////////////////////////////////////////////////
//  Copyright by HPotter v1.0 15/09/2020
// This is combo strategies for get a cumulative signal. 
//
// First strategy
// This System was created from the Book "How I Tripled My Money In The 
// Futures Market" by Ulf Jensen, Page 183. This is reverse type of strategies.
// The strategy buys at market, if close price is higher than the previous close 
// during 2 days and the meaning of 9-days Stochastic Slow Oscillator is lower than 50. 
// The strategy sells at market, if close price is lower than the previous close price 
// during 2 days and the meaning of 9-days Stochastic Fast Oscillator is higher than 50.
//
// Second strategy
// The name ‘Floor-Trader Pivot,’ came from the fact that Pivot points can 
// be calculated quickly, on the fly using price data from the previous day 
// as an input. Although time-frames of less than a day can be used, Pivots are 
// commonly plotted on the Daily Chart; using price data from the previous day’s 
// trading activity. 
//
// WARNING:
// - For purpose educate only
// - This script to change bars colors.
////////////////////////////////////////////////////////////
Reversal123(Length, KSmoothing, DLength, Level) =>
    vFast = sma(stoch(close, high, low, Length), KSmoothing) 
    vSlow = sma(vFast, DLength)
    pos = 0.0
    pos := iff(close[2] < close[1] and close > close[1] and vFast < vSlow and vFast > Level, 1,
	         iff(close[2] > close[1] and close < close[1] and vFast > vSlow and vFast < Level, -1, nz(pos[1], 0))) 
	pos


FPP() =>
    pos = 0
    xHigh  = security(syminfo.tickerid,"D", high[1])
    xLow   = security(syminfo.tickerid,"D", low[1])
    xClose = security(syminfo.tickerid,"D", close[1])
    vPP = (xHigh+xLow+xClose) / 3
    vR1 = (vPP * 2) - xLow
    vS1 = (vPP * 2) - xHigh
    pos := iff(close > vR1, 1,
             iff(close < vS1, -1, nz(pos[1], 0))) 
    pos

strategy(title="Combo Backtest 123 Reversal & Floor Pivot Points", shorttitle="Combo", overlay = true)
Length = input(15, minval=1)
KSmoothing = input(1, minval=1)
DLength = input(3, minval=1)
Level = input(50, minval=1)
//-------------------------
reverse = input(false, title="Trade reverse")
posReversal123 = Reversal123(Length, KSmoothing, DLength, Level)
posFPP = FPP()
pos = iff(posReversal123 == 1 and posFPP == 1 , 1,
	   iff(posReversal123 == -1 and posFPP == -1, -1, 0)) 
possig = iff(reverse and pos == 1, -1,
          iff(reverse and pos == -1 , 1, pos))	   
if (possig == 1) 
    strategy.entry("Long", strategy.long)
if (possig == -1)
    strategy.entry("Short", strategy.short)	 
if (possig == 0) 
    strategy.close_all()
barcolor(possig == -1 ? #b50404: possig == 1 ? #079605 : #0536b3 )

//This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//@version=4
//Author = https://www.tradingview.com/u/Dustin_D_RLT/
//Conditional Trailing Stops
study(title="Conditional Trailing Stops", shorttitle = "CTS", overlay=true, resolution="")
//Turn On / Off different stops
enableLongStops = input(title="Enable Long Stops", defval="Yes", options=["Yes", "No"])
longStopsYes = enableLongStops == "Yes"
enableShortStops = input(title="Enable Short Stops", defval="Yes", options=["Yes", "No"])
shortStopsYes = enableShortStops == "Yes"
enableNormalStops = input(title="Enable Normal Stops", defval="Yes", options=["Yes", "No"])
normalStopsYes = enableNormalStops == "Yes"
enableAggStops = input(title="Enable Aggressive Stops", defval="Yes", options=["Yes", "No"])
aggStopsYes = enableAggStops == "Yes"
//Normal "Lookback Length"
lookbackLength = input(4, minval=1, title="Conditional Trailing Stops Lookback Length")
normalOffset = input(0, minval=0, title="Conditional Trailing Stops Offset (Move on Close or Open)")
pastHigh = highest(high, lookbackLength)
pastLow = lowest(low, lookbackLength)
//Aggressive "Lookback Length"
aggLookbackLength = input(2, minval=1, title="Aggressive Trailing Stops Lookback Length")
aggOffset = input(0, minval=0, title="Aggressive Trailing Stops Offset (Move on Close or Open)")
aggPastHigh = highest(high, aggLookbackLength)
aggPastLow = lowest(low, aggLookbackLength)
//Next 2 lines for testing
//plot(pastHigh, "Past High", color=#0094FF, offset=1)
//plot(pastLow, "Past Low", color=#0094FF, offset=1)
//Bollinger Bands
basisBB = sma(close, 20)
dev = 2 * stdev(close, 20)
upperBB = basisBB + dev
lowerBB = basisBB - dev
//Next 5 lines for testing
//offset = input(0, "Bollinger Offset", type = input.integer, minval = -500, maxval = 500)
//plot(basisBB, "Basis", color=color.navy, offset = offset)
//p1 = plot(upperBB, "Upper BB", color=color.navy, offset = offset)
//p2 = plot(lowerBB, "Lower BB", color=color.navy, offset = offset)
//fill(p1, p2, title = "Background", color=#198787, transp=98)
//Intitial ATR Multiple Stop Location
atrValue = (rma(tr(true), length=14))
atrMult = input(2.0, minval=1.0, title="Stop ATR Multiple", step=.25)
//Highwave Warning
highWave = ((high - low) > atrValue and close > open and (high - low) > 5*(close - open)) or (close < open and (high - low) > 5*(open - close)) or (close == open)
//Long - Normal Conditional Trailing Stops
tightStop = (low > upperBB and low > pastHigh[1] and highWave)
condition1Stop = (close > upperBB)
condition2Stop = (close > pastHigh[1])
atrStop = close[1] < pastLow[2] and close > pastLow[1]
tightStopLoc = low
condition1StopLoc = pastLow
condition2StopLoc = pastLow[1]
atrStopLoc = (high - (atrValue * atrMult))
trailStop = tightStop and longStopsYes and normalStopsYes ? tightStopLoc : condition1Stop and longStopsYes and normalStopsYes ? condition1StopLoc : condition2Stop and longStopsYes and normalStopsYes ? condition2StopLoc : atrStop and longStopsYes and normalStopsYes ? atrStopLoc : na
plot(trailStop, "Conditional Trailing Stop", linewidth=4, color=color.red, style=plot.style_circles, offset=normalOffset)
//Holds value of trailStop
tS = valuewhen(trailStop and longStopsYes and normalStopsYes, trailStop, 0)
plot(tS, title="Conditional Trailing Stop", linewidth=2, color=color.red, offset=normalOffset)
//Short - Normal Conditional Trailing Stops
shortTightStop = (high < lowerBB and high < pastLow[1] and highWave)
shortCondition1Stop = (close < lowerBB)
shortCondition2Stop = (close < pastLow[1])
shortAtrStop = close[1] > pastHigh[2] and close < pastHigh[1]
shortTightStopLoc = high
shortCondition1StopLoc = pastHigh
shortCondition2StopLoc = pastHigh[1]
shortAtrStopLoc = (low + (atrValue * atrMult))
shortTrailStop = shortTightStop and shortStopsYes and normalStopsYes ? shortTightStopLoc : shortCondition1Stop and shortStopsYes and normalStopsYes ? shortCondition1StopLoc : shortCondition2Stop and shortStopsYes and normalStopsYes ? shortCondition2StopLoc : shortAtrStop and shortStopsYes and normalStopsYes ? shortAtrStopLoc : na
plot(shortTrailStop, "Short Conditional Trailing Stop", linewidth=4, color=color.maroon, style=plot.style_circles, offset=normalOffset)
//Holds value of trailStop
shortTS = valuewhen(shortTrailStop and shortStopsYes and normalStopsYes, shortTrailStop, 0)
plot(shortTS, title="Conditional Trailing Stop", linewidth=2, color=color.maroon, offset=normalOffset)
//Long - Aggressive Trailing Stops (Good for Intraday)
aggStop = low[1] > low[2]
aggStopLoc = aggPastLow[1] - ((aggPastHigh[1] - aggPastLow[1])*.05)
aggTrailStop = aggStop and longStopsYes and aggStopsYes ? aggStopLoc : na
plot(aggTrailStop, "Aggressive Trailing Stop", linewidth=4, color=color.orange, style=plot.style_circles, offset=aggOffset)
//Holds value of trailStop
aggTS = valuewhen(aggTrailStop and longStopsYes and aggStopsYes, aggTrailStop, 0)
plot(aggTS, title="Aggressive Trailing Stop", linewidth=2, color=color.orange, offset=aggOffset)
//Short - Aggressive Trailing Stops (Good for Intraday)
shortAggStop = high[1] < high[2]
shortAggStopLoc = aggPastHigh[1] + ((aggPastHigh[1] - aggPastLow[1])*.05)
shortAggTrailStop = shortAggStop and shortStopsYes and aggStopsYes ? shortAggStopLoc : na
plot(shortAggTrailStop, "Short Aggressive Trailing Stop", linewidth=4, color=color.purple, style=plot.style_circles, offset=aggOffset)
//Holds value of trailStop
shortAggTS = valuewhen(shortAggTrailStop and shortStopsYes and aggStopsYes, shortAggTrailStop, 0)
plot(shortAggTS, title="Short Aggressive Trailing Stop", linewidth=2, color=color.purple, offset=aggOffset)



// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Ross702

//@version=5

strategy('Daily Breakout Strategy', overlay=true, default_qty_value=1000000)

// Get user input
entryPips = input.float(title='Entry Pips', defval=3.0, tooltip='How many pips above high to place entry order')
stopPips = input.float(title='Stop Pips', defval=5.0, tooltip='Fixed pip stop loss distance')
targetPips = input.float(title='Target Pips', defval=10.0, tooltip='Fixed pip profit target distance')

// Get highs and lows
dailyHigh = request.security(syminfo.tickerid, 'D', high)
dailyLow = request.security(syminfo.tickerid, 'D', low)

// Determine buy & sell point (default 3 pips/30 points above/below high/low)
buyPoint = dailyHigh + entryPips * 10 * syminfo.mintick
sellPoint = dailyLow - entryPips * 10 * syminfo.mintick

// Determine stop loss (default 5 pips/50 points above/below buy/sell point)
stopLossLong = buyPoint - stopPips * 10 * syminfo.mintick
stopLossShort = sellPoint + stopPips * 10 * syminfo.mintick

// Determine take profit (default 10 pips/100 points above/below buy/sell point)
takeProfitLong = buyPoint + targetPips * 10 * syminfo.mintick
takeProfitShort = sellPoint - targetPips * 10 * syminfo.mintick

// If a new day has started and we're flat, place a buy stop & sell stop
var stopLossLongSaved = 0.0
var takeProfitLongSaved = 0.0
var stopLossShortSaved = 0.0
var takeProfitShortSaved = 0.0
newDay = ta.change(time('D'))
if newDay
    if strategy.position_size == 0
        stopLossLongSaved := stopLossLong
        takeProfitLongSaved := takeProfitLong
        strategy.entry(id='Long', direction=strategy.long, stop=buyPoint, oca_name='x', oca_type=strategy.oca.cancel)
        stopLossShortSaved := stopLossShort
        takeProfitShortSaved := takeProfitShort
        strategy.entry(id='Short', direction=strategy.short, stop=sellPoint, oca_name='x', oca_type=strategy.oca.cancel)

// Exit our trade if our stop loss or take profit is hit
strategy.exit(id='Long Exit', from_entry='Long', limit=takeProfitLongSaved, stop=stopLossLongSaved)
strategy.exit(id='Short Exit', from_entry='Short', limit=takeProfitShortSaved, stop=stopLossShortSaved)

// Draw data to the chart
plot(dailyHigh, color=color.new(color.blue, 0), linewidth=2, title='Daily High')
plot(dailyLow, color=color.new(color.blue, 0), linewidth=2, title='Daily Low')
plot(buyPoint, color=color.new(color.purple, 0), title='Buy Stop')
plot(stopLossLong, color=color.new(color.red, 0), title='Long Stop Loss')
plot(takeProfitLong, color=color.new(color.green, 0), title='Long Profit Target')
plot(sellPoint, color=color.new(color.purple, 0), title='Sell Stop')
plot(stopLossShort, color=color.new(color.red, 0), title='Short Stop Loss')
plot(takeProfitShort, color=color.new(color.green, 0), title='Short Profit Target')



//@version=4
// 
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © gregoirejohnb
//
// Moving average crossover systems measure drift in the market. They are great strategies for time-limited people.
// So, why don't more people use them?
// 
// I think it's due to poor choice in choosing EMA lengths: Market Wizard Ed Seykota has a guideline for moving average crossovers: the slow line should be at least 3x the fast line.
// This removes a lot of the whipsaws inherent in moving average systems, which means greater profitability.
// His other piece of advice: long-only strategies are best in stock markets where there's a lot more upside potential.
//
// Using these simple rules, we can reduce a lot of the whipsaws and low profitability trades! This strategy was made so you can see for yourself before trading.
//
// === HOW TO USE THIS INDICATOR ===
// 1) Choose your market and timeframe.
// 2) Choose the length.
// 3) Choose the multiplier.
// 4) Choose if the strategy is long-only or bidirectional. 
//
// Don't overthink the above! We don't know the best answers, that's why this strategy exists! We're going to test and find out.
//  After you find a good combination, set up an alert system with the default Exponential Moving Average indicators provided by TradingView.
//
// === TIPS ===
// Increase the multiplier to reduce whipsaws (back and forth trades).
// Increase the length to take fewer trades, decrease the length to take more trades.
// Try a Long-Only strategy to see if that performs better.
//
strategy(title="EMA Crossover Strategy", shorttitle="EMA COS", overlay=true, pyramiding=0, default_qty_type=strategy.percent_of_equity, default_qty_value=10, currency=currency.USD,commission_type=strategy.commission.percent,commission_value=0.1)

// === GENERAL INPUTS ===
//strategy start date
start_year = input(defval=2020, title="Backtest Start Year")

// === LOGIC ===
length = input(type=input.integer,defval=20,minval=1,title="Length")
ratio = input(type=input.integer,defval=3,title="Multiplier (3x length, 4x length, etc)",options=[3,4,5,6,7,8,9,10])
longOnly = input(type=input.bool,defval=false,title="Long Only")
fast = ema(hl2,length)
slow = ema(hl2,length * ratio)
plot(fast,linewidth=2,color=color.orange,title="Fast")
plot(slow,linewidth=2,color=color.blue,title="Slow")

longEntry = crossover(fast,slow)
shortEntry = crossunder(fast,slow)

plotshape(longEntry ? close : na,style=shape.triangleup,color=color.green,location=location.belowbar,size=size.small,title="Long Triangle")
plotshape(shortEntry and not longOnly ? close : na,style=shape.triangledown,color=color.red,location=location.abovebar,size=size.small,title="Short Triangle")
plotshape(shortEntry and longOnly ? close : na,style=shape.xcross,color=color.black,location=location.abovebar,size=size.small,title="Exit Sign")

// === STRATEGY - LONG POSITION EXECUTION ===
enterLong() =>
    crossover(fast,slow) and 
       time > timestamp(start_year, 1, 1, 01, 01)
exitLong() =>
    longOnly and crossunder(fast,slow)
strategy.entry(id="Long", long=strategy.long, when=enterLong())
strategy.close(id="Long", when=exitLong())
// === STRATEGY - SHORT POSITION EXECUTION ===
enterShort() =>
    not longOnly and crossunder(fast,slow) and 
       time > timestamp(start_year, 1, 1, 01, 01)
exitShort() =>
    false
strategy.entry(id="Short", long=strategy.short, when=enterShort())
strategy.close(id="Short", when=exitShort())

//@version=4
//Author = Dustin Drummond https://www.tradingview.com/u/Dustin_D_RLT/
//Strategy based in part on original 10ema Basic Swing Trade Strategy by Matt Delong: https://www.tradingview.com/u/MattDeLong/
//Link to original 10ema Basic Swing Trade Strategy: https://www.tradingview.com/script/8yhGnGCM-10ema-Basic-Swing-Trade-Strategy/
//This is the Original EMAC - Exponential Moving Average Cross Strategy built as a class for reallifetrading dot com and so has all the default settings and has not been optimized
//I would not recomend using this strategy with the default settings and is for educational purposes only
//For the fully optimized version please come back around the same time tomorrow 6/16/21 for the EMAC - Exponential Moving Average Cross - Optimized
//EMAC - Exponential Moving Average Cross
strategy(title="EMAC - Exponential Moving Average Cross", shorttitle = "EMAC", overlay = true, calc_on_every_tick=false, default_qty_value = 100, initial_capital = 100000, default_qty_type = strategy.fixed, pyramiding = 0, process_orders_on_close=true)
//creates a time filter to prevent "too many orders error" and allows user to see Strategy results per year by changing input in settings in Stratey Tester
startYear = input(2015, title="Start Year", minval=1980, step=1)
timeFilter = (year >= startYear) and (month >= 1) and (dayofmonth >= 1)
//R Size (Risk Amount)
rStaticOrPercent = input(title="R Static or Percent", defval="Static", options=["Static", "Percent"])
rSizeStatic = input(2000, title="R Size Static", minval=1, step=100)
rSizePercent = input(3, title="R Size Percent", minval=.01, step=.01)
rSize = rStaticOrPercent == "Static" ? rSizeStatic : rStaticOrPercent == "Percent" ? (rSizePercent * .01 * strategy.equity) : 1
//Recent Trend Indicator "See the standalone version for detailed description"
res = input(title="Trend Timeframe", type=input.resolution, defval="W")
trend = input(26, minval=1, title="# of Bars for Trend")
trendMult = input(15, minval=0, title="Trend Growth %", step=.25) / 100
currentClose = security(syminfo.tickerid, res, close)
pastClose = security(syminfo.tickerid, res, close[trend])
//Trend Indicator
upTrend = (currentClose >= (pastClose * (1 + trendMult)))
downTrend = (currentClose <= (pastClose * (1 - trendMult)))
sidewaysUpTrend = (currentClose < (pastClose * (1 + trendMult)) and (currentClose > pastClose))
sidewaysDownTrend = (currentClose > (pastClose * (1 - trendMult)) and (currentClose < pastClose))
//Plot Trend on Chart
plotshape(upTrend, "Up Trend", style=shape.square, location=location.top, color=color.green, size=size.small)
plotshape(downTrend, "Down Trend", style=shape.square, location=location.top, color=color.red, size=size.small)
plotshape(sidewaysUpTrend, "Sideways Up Trend", style=shape.square, location=location.top, color=color.yellow, size=size.small)
plotshape(sidewaysDownTrend, "Sideways Down Trend", style=shape.square, location=location.top, color=color.orange, size=size.small)
//What trend signals to use in entrySignal
trendRequired = input(title="Trend Required", defval="Orange", options=["Green", "Yellow", "Orange", "Red"])
goTrend = trendRequired == "Orange" ? upTrend or sidewaysUpTrend or sidewaysDownTrend : trendRequired == "Yellow" ? upTrend or sidewaysUpTrend : trendRequired == "Green" ? upTrend : trendRequired == "Red" ? upTrend or sidewaysUpTrend or sidewaysDownTrend or downTrend : na
//MAs Inputs Defalt is 10 EMA, 20 EMA, 50 EMA, 100 SMA and 200 SMA
ma1Length = input(10, title="MA1 Period", minval=1, step=1)
ma1Type = input(title="MA1 Type", defval="EMA", options=["SMA", "EMA", "WMA"])
ma2Length = input(20, title="MA2 Period", minval=1, step=1)
ma2Type = input(title="MA2 Type", defval="EMA", options=["SMA", "EMA", "WMA"])
ma3Length = input(50, title="MA3 Period", minval=1, step=1)
ma3Type = input(title="MA3 Type", defval="EMA", options=["SMA", "EMA", "WMA"])
ma4Length = input(100, title="MA4 Period", minval=1, step=1)
ma4Type = input(title="MA4 Type", defval="SMA", options=["SMA", "EMA", "WMA"])
ma5Length = input(200, title="MA5 Period", minval=1, step=1)
ma5Type = input(title="MA5 Type", defval="SMA", options=["SMA", "EMA", "WMA"])
//MAs defined
ma1 = ma1Type == "EMA" ? ema(close, ma1Length) : ma1Type == "SMA" ? sma(close, ma1Length) : wma(close, ma1Length)
ma2 = ma2Type == "EMA" ? ema(close, ma2Length) : ma2Type == "SMA" ? sma(close, ma2Length) : wma(close, ma2Length)
ma3 = ma3Type == "EMA" ? ema(close, ma3Length) : ma3Type == "SMA" ? sma(close, ma3Length) : wma(close, ma3Length)
ma4 = ma4Type == "SMA" ? sma(close, ma4Length) : ma4Type == "EMA" ? ema(close, ma4Length) : wma(close, ma4Length)
ma5 = ma5Type == "SMA" ? sma(close, ma5Length) : ma5Type == "EMA" ? ema(close, ma5Length) : wma(close, ma5Length)
//Plot MAs
plot(ma1, title="MA1", color=color.yellow, linewidth=1, style=plot.style_line)
plot(ma2, title="MA2", color=color.purple, linewidth=1, style=plot.style_line)
plot(ma3, title="MA3", color=#00FFFF, linewidth=1, style=plot.style_line)
plot(ma4, title="MA4", color=color.blue, linewidth=2, style=plot.style_line)
plot(ma5, title="MA5", color=color.orange, linewidth=2, style=plot.style_line)
//Allows user to toggle on/off ma1 > ma2 filter
enableShortMAs = input(title="Enable Short MA Cross Filter", defval="Yes", options=["Yes", "No"])
shortMACross = enableShortMAs == "Yes" and ma1 > ma2 or enableShortMAs == "No"
//Allows user to toggle on/off ma4 > ma5 filter
enableLongMAs = input(title="Enable Long MA Cross Filter", defval="Yes", options=["Yes", "No"])
longMACross = enableLongMAs == "Yes" and ma4 >= ma5 or enableLongMAs == "No"
//Entry Signals
entrySignal = (strategy.position_size <= 0 and close[1] < ma1[1] and close > ma1 and close > ma2 and close > ma3 and shortMACross and ma1 > ma3 and longMACross and goTrend)
secondSignal = (strategy.position_size > 0 and close[1] < ma1[1] and close > ma1 and close > ma2 and close > ma3 and shortMACross and ma1 > ma3 and longMACross and goTrend)
plotshape(entrySignal, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)
plotshape(secondSignal, style=shape.triangleup, location=location.belowbar, color=color.lime, size=size.small)
//ATR for Stops
atrValue = (atr(14))
//to test ATR enable next line
//plot(atrValue, linewidth=1, color=color.black, style=plot.style_line)
atrMult = input(2.5, minval=.25, step=.25, title="Stop ATR Multiple")
//Only target3Mult is used in current strategy target1 and target2 might be used in the future with pyramiding
//target1Mult = input(1.0, minval=.25, step=.25, title="Targert 1 Multiple")
//target2Mult = input(2.0, minval=.25, step=.25, title="Targert 2 Multiple")
target3Mult = input(3.0, minval=.25, step=.25, title="Target Multiple")
enableAtrStop = input(title="Enable ATR Stops", defval="Yes", options=["Yes", "No"])
//Intitial Recomended Stop Location
atrStop = entrySignal and ((high - (atrMult * atrValue)) < low) ? (high - (atrMult * atrValue)) : low
//oneAtrStop is used for testing only enable next 2 lines to test
//oneAtrStop = entrySignal ? (high - atrValue) : na
//plot(oneAtrStop, "One ATR Stop", linewidth=2, color=color.orange, style=plot.style_linebr)
initialStop = entrySignal and enableAtrStop == "Yes" ? atrStop : entrySignal ? low : na
//Stops changed to stoploss to hold value for orders the next line is old code "bug"
//plot(initialStop, "Initial Stop", linewidth=2, color=color.red, style=plot.style_linebr)
//Set Initial Stop and hold value "debug code"
stoploss = valuewhen(entrySignal, initialStop, 0)
plot(stoploss, title="Stop", linewidth=2, color=color.red)
enableStops = input(title="Enable Stops", defval="Yes", options=["Yes", "No"])
yesStops = enableStops == "Yes" ? 1 : enableStops == "No" ? 0 : na
//Calculate size of trade based on R Size
//Original buggy code: 
//positionSize = (rSize/(close - initialStop))
//Added a minimum order size of 1 "debug code"
positionSize = (rSize/(close - initialStop)) > 1 ? (rSize/(close - initialStop)) : 1
//Targets
//Enable or Disable Targets
enableTargets = input(title="Enable Targets", defval="Yes", options=["Yes", "No"])
yesTargets = enableTargets == "Yes" ? 1 : enableTargets == "No" ? 0 : na
//Only target3 is used in current strategy target1 and target2 might be used in the future with pyramiding
//target1 = entrySignal ? (close + ((close - initialStop) * target1Mult)) : na
//target2 = entrySignal ? (close + ((close - initialStop) * target2Mult)) : na
target3 = entrySignal ? (close + ((close - initialStop) * target3Mult)) : na
//plot(target1, "Target 1", linewidth=2, color=color.green, style=plot.style_linebr)
//plot(target2, "Target 2", linewidth=2, color=color.green, style=plot.style_linebr)
plot(target3, "Target 3", linewidth=2, color=color.green, style=plot.style_linebr)
//Set Target and hold value "debug code"
t3 = valuewhen(entrySignal, target3, 0)
//To test t3 and see plot enable next line
//plot(t3, title="Target", linewidth=2, color=color.green)
//MA1 Cross Exit
enableEarlyExit = input(title="Enable Early Exit", defval="Yes", options=["Yes", "No"])
earlyExit = enableEarlyExit == "Yes" ? 1 : enableEarlyExit == "No" ? 0 : na
ma1CrossExit = strategy.position_size > 0 and close < ma1
//Entry Order
strategy.order("Entry", long = true, qty = positionSize, when = (strategy.position_size <= 0 and entrySignal and timeFilter))
//Early Exit Order
strategy.close_all(when = ma1CrossExit and timeFilter and earlyExit, comment = "MA1 Cross Exit")
//Stop and Target Orders
//strategy.cancel orders are needed to prevent bug with Early Exit Order
strategy.order("Stop Loss", false, qty = strategy.position_size, stop=stoploss, oca_name="Exit", oca_type=strategy.oca.cancel, when = timeFilter and yesStops, comment = "Stop Loss")
strategy.cancel("Stop Loss", when = ma1CrossExit and timeFilter and earlyExit)
strategy.order("Target", false, qty = strategy.position_size, limit=t3, oca_name="Exit", oca_type=strategy.oca.cancel, when = timeFilter and yesTargets, comment = "Target")
strategy.cancel("Target", when = ma1CrossExit and timeFilter and earlyExit)


//@version=5
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //
//# * ══════════════════════════════════════════════════════════════════════════════════════════════
//# *
//# * Study       : Fibonacci Extention / Retracment / Pivot Points
//# *                - Volume and Volatility AddOns
//# * Author      : © dgtrd
//# *
//# * Revision History
//# *  Release    : Apr 19, 2021
//# *  Update     : May 11, 2021 : added ability to draw simultaneously Extensions or Retracements + Pivot Points
//# *                              added ability to filter Pivot Points Support or Resistance Levels based on Price Action
//# *  Update     : May 22, 2021 : added ability to draw Historical Pivot Points
//# *  Update     : Jan 29, 2022 : made labels much more customizable, slight improvments and converted to pine v5 
//# *
//# * ══════════════════════════════════════════════════════════════════════════════════════════════
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //

indicator('Fibonacci Extention / Retracment / Pivot Points by DGT', 'FIBs ʙʏ DGT ☼☾', true, max_lines_count = 500, max_labels_count = 500)


// ══════════════════════════════════════════════════════════════════════════════════════════════════ //
//
// Fibonacci Retracement / Extention / Pivot Points and Zig Zag
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //

// ---------------------------------------------------------------------------------------------- //
// -Inputs -------------------------------------------------------------------------------------- //

tooltip_threshold   = 'Deviation is a multiplier that affects how much the price should deviate from the previous pivot in order for the bar to become a new pivot' + 
                      '\n\nDepth affects the minimum number of bars that will be taken into account when building'

tooltip_pivot_point = 'A pivot point is a technical analysis indicator used to determine the overall trend of the market over different time frames'

tooltip_zigzag      = 'The Zig Zag indicator is used to identify price trends then connected by straight lines that help the trader visual the price action' + 
                      'This indicator works to eliminate confusion over small price changes or fluctuations and aims to project trend changes overtime'
// ---------------------------------------------------------------------------------------------- //

group_pick   = 'Pick a Fibonacci Tool'

i_isFib      = input.bool  (true, 'Pick a Fibonacci Tool', inline='FIB', group=group_pick)
i_fibTool    = input.string('Pivot Points', '             ', 
                             options=['Pivot Points', 'Retracements', 'Retracements + Pivot Points', 'Extentions', 'Extentions + Pivot Points'], inline='FIB', group=group_pick)

i_fibTime    = input.bool (true, 'Fib Time Zones', inline='TZ', group=group_pick)
i_tzColor    = input.color(#2196f3, ''           , inline='TZ', group=group_pick)
// ---------------------------------------------------------------------------------------------- //

group_pivot  = 'Fibonacci Pivot Points Settings'

i_htf_mode   = input.string('Auto', 'Pivot Points TimeFrame', options=['Auto', 'User Defined'], inline='HTF', group=group_pivot, tooltip=tooltip_pivot_point)
i_htf_user_  = input.string('Weekly', '          or User Defined', 
                             options=['15 Min', '1 Hour', '4 Hour', 'Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly'], inline='HTF1', group=group_pivot)

i_htf_user   = i_htf_user_ == '15 Min'    ? '15'  : 
               i_htf_user_ == '1 Hour'    ? '60'  : 
               i_htf_user_ == '4 Hour'    ? '240' : 
               i_htf_user_ == 'Daily'     ? 'D'   : 
               i_htf_user_ == 'Weekly'    ? 'W'   : 
               i_htf_user_ == 'Monthly'   ? 'M'   : 
               i_htf_user_ == 'Quarterly' ? '3M'  : '12M'

i_levelsPvt  = input.string('Levels', 'Level Labels', options=['Levels', 'Prices', 'Levels + Prices', 'None'], inline='pvt', group=group_pivot)
i_levelsPvtP = input.string('Pivot End', '', options=['Last Bar', 'Pivot End'], inline='pvt', group=group_pivot)
i_levelsPvtS = input.string('Small', '', options=['Small', 'Normal'], inline='pvt', group=group_pivot)

i_relevant   = input.bool(false, 'Only Relevant Pivot Point Levels', group=group_pivot)
i_histPP     = input.bool(false, 'Historical Pivot Points', group=group_pivot)
i_extend     = input.bool(false, 'Extend Pivot Point Lines', inline='fLines', group=group_pivot)
i_extendL    = input.string('Dashed', '', options=['Dashed', 'Dotted', 'Solid'], inline='fLines', group=group_pivot)

// ---------------------------------------------------------------------------------------------- //

group_fib_tool = 'Fibonacci Extention / Retracement / TimeZone Settings'

i_dev_thresh = ta.atr(10) / close * 100 * input.float(3, 'Deviation', minval=0, inline='Pivots', group=group_fib_tool, tooltip=tooltip_threshold)
i_depth      = input.int(11, '       Depth', minval=1, inline='Pivots', group=group_fib_tool)
